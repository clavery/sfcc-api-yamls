swagger: '2.0'
host: abcd-001.dx.commercecloud.salesforce.com
info:
  description: 'Data API endpoints enable developers to build applications for merchants:
    Create, update, delete business objects, like products, customers, pricing and
    promotions or assignments. They typically provide read and write access and are
    designed for moderate usage.'
  title: Data API
  version: '24.1'
basePath: /s/-/dw/data/v24.1
consumes:
- application/json
- text/xml
- application/xml
produces:
- application/json
- text/xml
- application/xml
securityDefinitions:
  oauth2_application:
    description: Authentication flow with client ID and password with account manager.
    flow: application
    tokenUrl: https://account.demandware.com:443/dw/oauth2/access_token
    type: oauth2
  client_id:
    description: Add client ID for application identification. Alternative as 'client_id'
      query parameter.
    in: header
    name: x-dw-client-id
    type: apiKey
definitions:
  empty_body: {}
  access_key_details:
    description: Access key information
    properties:
      access_key:
        description: The newly created access key (only available upon access key
          creation, missing otherwise).
        type: string
      enabled:
        description: True when the access key is enabled.
        type: boolean
      expiration_date:
        description: The date when the access key expires.
        format: date-time
        type: string
  access_key_update_request:
    description: Request body to enable / disable an access key.
    properties:
      enabled:
        description: True when the access key should be enabled.
        type: boolean
paths:
  /users/{login}/access_key/{scope}:
    delete:
      description: Deletes a single access key.
      operationId: deleteUsersByIDAccessKeyByID
      parameters:
      - description: The login of the user.
        in: path
        minLength: 1
        name: login
        required: true
        type: string
      - description: The scope of the access key.
        in: path
        name: scope
        required: true
        type: string
      responses:
        '204':
          description: ''
        '403':
          description: '`UserAccessForbiddenException` - When the user executing the
            request is missing the required functional permission ''Manage_Users_Access_Keys''.
            or `UserNotExternallyManagedException` - When the specified user is not
            externally managed.'
        '404':
          description: '`AuthenticationScopeNotFoundException` - If the access scope
            does not exist. or `UserNotFoundException` - If no user was found for
            the login. or `AccessKeyNotFoundException` - If the access key does not
            exist.'
      security:
      - oauth2_application: []
      tags:
      - users
    get:
      description: Gets a single access key.
      operationId: getUsersByIDAccessKeyByID
      parameters:
      - description: The login of the user.
        in: path
        minLength: 1
        name: login
        required: true
        type: string
      - description: The scope of the access key.
        in: path
        name: scope
        required: true
        type: string
      responses:
        default:
          description: ''
          schema:
            $ref: '#/definitions/access_key_details'
        '403':
          description: '`UserAccessForbiddenException` - When the user executing the
            request is missing the required functional permission ''Manage_Users_Access_Keys''.
            or `UserNotExternallyManagedException` - When the specified user is not
            externally managed.'
        '404':
          description: '`AuthenticationScopeNotFoundException` - If the access scope
            does not exist. or `UserNotFoundException` - If no user was found for
            the login. or `AccessKeyNotFoundException` - If the access key does not
            exist.'
      security:
      - oauth2_application: []
      tags:
      - users
    patch:
      description: Enables / disables a single access key.
      operationId: patchUsersByIDAccessKeyByID
      parameters:
      - description: The login of the user.
        in: path
        minLength: 1
        name: login
        required: true
        type: string
      - description: The scope of the access key.
        in: path
        name: scope
        required: true
        type: string
      - in: body
        name: body
        schema:
          $ref: '#/definitions/access_key_update_request'
      responses:
        default:
          description: ''
          schema:
            $ref: '#/definitions/access_key_details'
        '403':
          description: '`UserAccessForbiddenException` - When the user executing the
            request is missing the required functional permission ''Manage_Users_Access_Keys''.
            or `UserNotExternallyManagedException` - When the specified user is not
            externally managed.'
        '404':
          description: '`AuthenticationScopeNotFoundException` - If the access scope
            does not exist. or `UserNotFoundException` - If no user was found for
            the login. or `AccessKeyNotFoundException` - If the access key does not
            exist.'
      security:
      - oauth2_application: []
      tags:
      - users
    put:
      description: Creates a single access key (and removes an existing one for the
        same scope).
      operationId: putUsersByIDAccessKeyByID
      parameters:
      - description: The login of the user.
        in: path
        minLength: 1
        name: login
        required: true
        type: string
      - description: The scope of the access key.
        in: path
        name: scope
        required: true
        type: string
      - in: body
        name: body
        schema:
          $ref: '#/definitions/empty_body'
      responses:
        default:
          description: ''
          schema:
            $ref: '#/definitions/access_key_details'
        '400':
          description: '`AccessKeyIsExpiredException` - If the acces key is already
            expired.'
        '403':
          description: '`UserAccessForbiddenException` - When the user executing the
            request is missing the required functional permission ''Manage_Users_Access_Keys''.
            or `UserNotExternallyManagedException` - When the specified user is not
            externally managed.'
        '404':
          description: '`AuthenticationScopeNotFoundException` - If the access scope
            does not exist. or `UserNotFoundException` - If no user was found for
            the login.'
      security:
      - oauth2_application: []
      tags:
      - users
